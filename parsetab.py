
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSFLOATDEC FNUMBER INTDEC INUMBER NAME PRINT VARBOOL VBOOLstatement : INTDEC NAME is_assing\n    statement : VBOOL NAME is_assingis_assing : "=" expression \n                | statement : FLOATDEC NAMEstatement : PRINT \'(\' expression \')\' statement : NAME "=" expressionstatement : expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INUMBERexpression : FNUMBERexpression : VARBOOLexpression : NAME'
    
_lr_action_items = {'INTDEC':([0,],[2,]),'VBOOL':([0,],[4,]),'FLOATDEC':([0,],[5,]),'PRINT':([0,],[6,]),'NAME':([0,2,4,5,7,9,14,17,20,21,22,23,26,],[3,13,15,16,19,19,19,19,19,19,19,19,19,]),'-':([0,3,7,8,9,10,11,12,14,17,18,19,20,21,22,23,24,26,27,29,30,31,32,33,34,35,],[9,-18,9,21,9,-15,-16,-17,9,9,21,-18,9,9,9,9,-13,9,21,21,-14,-9,-10,-11,-12,21,]),'(':([0,6,7,9,14,17,20,21,22,23,26,],[7,17,7,7,7,7,7,7,7,7,7,]),'INUMBER':([0,7,9,14,17,20,21,22,23,26,],[10,10,10,10,10,10,10,10,10,10,]),'FNUMBER':([0,7,9,14,17,20,21,22,23,26,],[11,11,11,11,11,11,11,11,11,11,]),'VARBOOL':([0,7,9,14,17,20,21,22,23,26,],[12,12,12,12,12,12,12,12,12,12,]),'$end':([1,3,8,10,11,12,13,15,16,19,24,25,27,28,30,31,32,33,34,35,36,],[0,-18,-8,-15,-16,-17,-4,-4,-5,-18,-13,-1,-7,-2,-14,-9,-10,-11,-12,-3,-6,]),'=':([3,13,15,],[14,26,26,]),'+':([3,8,10,11,12,18,19,24,27,29,30,31,32,33,34,35,],[-18,20,-15,-16,-17,20,-18,-13,20,20,-14,-9,-10,-11,-12,20,]),'*':([3,8,10,11,12,18,19,24,27,29,30,31,32,33,34,35,],[-18,22,-15,-16,-17,22,-18,-13,22,22,-14,22,22,-11,-12,22,]),'/':([3,8,10,11,12,18,19,24,27,29,30,31,32,33,34,35,],[-18,23,-15,-16,-17,23,-18,-13,23,23,-14,23,23,-11,-12,23,]),')':([10,11,12,18,19,24,29,30,31,32,33,34,],[-15,-16,-17,30,-18,-13,36,-14,-9,-10,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,7,9,14,17,20,21,22,23,26,],[8,18,24,27,29,31,32,33,34,35,]),'is_assing':([13,15,],[25,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> INTDEC NAME is_assing','statement',3,'p_statement_declare_int','compiler.py',63),
  ('statement -> VBOOL NAME is_assing','statement',3,'p_statement_declare_bool','compiler.py',71),
  ('is_assing -> = expression','is_assing',2,'p_is_assing','compiler.py',75),
  ('is_assing -> <empty>','is_assing',0,'p_is_assing','compiler.py',76),
  ('statement -> FLOATDEC NAME','statement',2,'p_statement_declare_float','compiler.py',82),
  ('statement -> PRINT ( expression )','statement',4,'p_statement_print','compiler.py',86),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','compiler.py',90),
  ('statement -> expression','statement',1,'p_statement_expr','compiler.py',97),
  ('expression -> expression + expression','expression',3,'p_expression_binop','compiler.py',101),
  ('expression -> expression - expression','expression',3,'p_expression_binop','compiler.py',102),
  ('expression -> expression * expression','expression',3,'p_expression_binop','compiler.py',103),
  ('expression -> expression / expression','expression',3,'p_expression_binop','compiler.py',104),
  ('expression -> - expression','expression',2,'p_expression_uminus','compiler.py',111),
  ('expression -> ( expression )','expression',3,'p_expression_group','compiler.py',115),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','compiler.py',119),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','compiler.py',123),
  ('expression -> VARBOOL','expression',1,'p_expression_varbool','compiler.py',127),
  ('expression -> NAME','expression',1,'p_expression_name','compiler.py',131),
]
